/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */

package userinterface.partyRadar.memberRole;

import Business.Campus.Campus;
import Business.CampusParty;
import Business.Enterprise.Enterprise;
import Business.Group.EventManagerGroup;
import Business.Group.Group;
import Business.InformationQueue.EventPost;
import Business.InformationQueue.InformationPost;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Image;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author
 */
public class BrowseEvents extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;

    private CampusParty business;
    private EventPost hotPost;
    /** Creates new form BrowseProducts */
    
    public BrowseEvents(JPanel userProcessContainer, Enterprise enterprise, UserAccount userAccount, CampusParty business) {

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.business = business;
        
        populateCbCampus();
        populateEvent();
        populateHotEvent();
    }
    
    private void populateCbCampus(){
        
        cbCampus.removeAllItems();
    
        for (Campus c: business.getCampusList()){
            cbCampus.addItem(c);
        }

    }
    
    public void populateEvent(){

        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        
        
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
             EventPost post = (EventPost)infoPost;
            Object[] row = new Object[6];
            row[0] = post;
            row[1] = post.getDate();
            if (post.getvPost() != null){
             if (post.getvPost().getStatus().equals("Booking Rejected")){
              continue;
             }
             row[2] = post.getvPost().getVenue().getVenueName();
            }
            row[3] = post.getAvailableSpot();
            row[4] = post.getLikes();
            row[5] = post.getFavorites();
            model.addRow(row);
        }
    }
    
    private void populateEvent(Campus selectCampus){

        
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        
        if(selectCampus != null)
            for (InformationPost infoPost : business.getCampusEventPostDirectory(selectCampus)){
                EventPost post = (EventPost)infoPost;
                Object[] row = new Object[6];
                row[0] = post;
                row[1] = post.getDate();
                if (post.getvPost() != null)
                        row[2] = post.getvPost().getVenue().getVenueName();
                row[3] = post.getAvailableSpot();
                row[4] = post.getLikes();
                row[5] = post.getFavorites();

                model.addRow(row);
            }
                
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        productTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnViewEventDetails = new javax.swing.JButton();
        cbCampus = new javax.swing.JComboBox();
        cbSort = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtSearchEventName = new javax.swing.JTextField();
        btnSearchEventName = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDate1 = new javax.swing.JTextField();
        txtDate2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnSearchDate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEvent = new javax.swing.JTable();
        lblHeader2 = new javax.swing.JLabel();
        lblHotEvent1 = new javax.swing.JLabel();

        productTable2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(productTable2);

        setBackground(new java.awt.Color(250, 250, 250));
        setPreferredSize(new java.awt.Dimension(750, 1000));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Campus");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 110, 20));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/partyRadar/memberRole/return-arrow.png"))); // NOI18N
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 730, 90, -1));

        btnViewEventDetails.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnViewEventDetails.setText("View Event Details");
        btnViewEventDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEventDetailsActionPerformed(evt);
            }
        });
        add(btnViewEventDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 670, 140, 30));

        cbCampus.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbCampus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCampusActionPerformed(evt);
            }
        });
        add(cbCampus, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 100, 40));

        cbSort.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "# Likes", "# Collections", "# Available Spots", "Date" }));
        cbSort.setActionCommand("c");
        cbSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortActionPerformed(evt);
            }
        });
        add(cbSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 250, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Rank by :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, 140, 20));

        txtSearchEventName.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        add(txtSearchEventName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 250, -1));

        btnSearchEventName.setBackground(new java.awt.Color(245, 245, 245));
        btnSearchEventName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchEventName.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchEventName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/partyRadar/memberRole/angle-arrow-pointing-to-right.png"))); // NOI18N
        btnSearchEventName.setBorderPainted(false);
        btnSearchEventName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEventNameActionPerformed(evt);
            }
        });
        add(btnSearchEventName, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 200, 30, 50));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Event Name :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, 140, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Date (dd/mm/yyyy) :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 150, 30));

        txtDate1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        add(txtDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 110, -1));

        txtDate2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        add(txtDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 310, 110, -1));

        jLabel5.setText("to");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, -1, 50));

        btnSearchDate.setBackground(new java.awt.Color(245, 245, 245));
        btnSearchDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchDate.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/partyRadar/memberRole/magnifying-glass.png"))); // NOI18N
        btnSearchDate.setText("Search");
        btnSearchDate.setBorder(null);
        btnSearchDate.setBorderPainted(false);
        btnSearchDate.setMaximumSize(new java.awt.Dimension(24, 24));
        btnSearchDate.setMinimumSize(new java.awt.Dimension(24, 24));
        btnSearchDate.setPreferredSize(new java.awt.Dimension(24, 24));
        btnSearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDateActionPerformed(evt);
            }
        });
        add(btnSearchDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 310, 40, -1));

        tblEvent.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblEvent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Date", "Location", "Available Spots", "# Likes", "# Collection"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblEvent);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 420, 530, 210));

        lblHeader2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lblHeader2.setForeground(new java.awt.Color(204, 0, 0));
        lblHeader2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/partyRadar/memberRole/logo.png"))); // NOI18N
        lblHeader2.setPreferredSize(new java.awt.Dimension(400, 124));
        add(lblHeader2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 260, 70));

        lblHotEvent1.setText("<Hot Event Name>");
        add(lblHotEvent1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cbCampusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCampusActionPerformed

        Campus selectCampus = (Campus) cbCampus.getSelectedItem();       
        populateEvent(selectCampus);

    }//GEN-LAST:event_cbCampusActionPerformed

    private void btnViewEventDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEventDetailsActionPerformed
        
        int selectRow = tblEvent.getSelectedRow();
        
        if(selectRow <0) {
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view detials", "Warning", JOptionPane.WARNING_MESSAGE);            
        } 
        else{
            EventPost post = (EventPost) tblEvent.getValueAt(selectRow, 0);
           
            ViewEventDetails panel = new ViewEventDetails(userProcessContainer, enterprise, post, userAccount, business);
            userProcessContainer.add("ViewEventDetails", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }

        
    }//GEN-LAST:event_btnViewEventDetailsActionPerformed

    private void cbSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortActionPerformed
        int index = cbSort.getSelectedIndex();
        switch (index){
            case 0:
            populateEvent();
            break;
            // Like
            case 1:
            populateEventByLikes();
            break;
            // Collect
            case 2:
            populateEventByFavorites();
            break;
            // Number of seats remaining
            case 3:
            populateEventByAvaSpots();
            break;
            case 4:
            populateEventByDate();
            break;
        }
    }//GEN-LAST:event_cbSortActionPerformed

    private void btnSearchEventNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEventNameActionPerformed
        String eventName = txtSearchEventName.getText();
        if (eventName.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please fill in event name!");
            return;
        }
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
            EventPost post = (EventPost)infoPost;
            if (post.getEventName().equals(eventName)){
                ViewEventDetails panel = new ViewEventDetails(userProcessContainer, enterprise, post, userAccount, business);
                userProcessContainer.add("ViewEventDetails", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                return;
            }
        }
        JOptionPane.showMessageDialog(null, "The event was not found!");
    }//GEN-LAST:event_btnSearchEventNameActionPerformed

    private void btnSearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDateActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        ArrayList<EventPost> posts = new ArrayList<EventPost>();
        String txt1 = txtDate1.getText();
        String txt2 = txtDate2.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        dateFormat.setLenient(false);
        try {
            Date date1 = dateFormat.parse(txt1);
            Date date2 = dateFormat.parse(txt2);

            // 遍历所有EventPost
            for (InformationPost infoPost : business.getMasterEventPostDirectory()){
                EventPost post = (EventPost)infoPost;
                long postTime = post.getDate().getTime();
                long time1 = date1.getTime();
                long time2 = date2.getTime();
                if (postTime >= time1 && postTime <= time2){
                    posts.add(post);
                }
            }
            for (EventPost p : posts){
                Object[] row = new Object[6];
                row[0] = p;
                row[1] = p.getDate();
                row[2] = p.getvPost().getVenue().getVenueName();
                row[3] = p.getAvailableSpot();
                row[4] = p.getLikes();
                row[5] = p.getFavorites();
                model.addRow(row);
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Please follow valide date format!");
        }
    }//GEN-LAST:event_btnSearchDateActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearchDate;
    private javax.swing.JButton btnSearchEventName;
    private javax.swing.JButton btnViewEventDetails;
    private javax.swing.JComboBox cbCampus;
    private javax.swing.JComboBox cbSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblHeader2;
    private javax.swing.JLabel lblHotEvent1;
    private javax.swing.JTable productTable2;
    private javax.swing.JTable tblEvent;
    private javax.swing.JTextField txtDate1;
    private javax.swing.JTextField txtDate2;
    private javax.swing.JTextField txtSearchEventName;
    // End of variables declaration//GEN-END:variables

    
    private void populateEventByLikes() {
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        ArrayList<EventPost> posts = new ArrayList<EventPost>();
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
            EventPost post = (EventPost)infoPost;
            posts.add(post);
        }
        Collections.sort(posts, new Comparator<EventPost>(){
            @Override
            public int compare(EventPost o1, EventPost o2) {
                return o2.getLikes() - o1.getLikes();
            }
        });
//        posts.sort(new Comparator<EventPost>() {
//            @Override
//            public int compare(EventPost o1, EventPost o2) {
//                return o2.getLikes() - o1.getLikes();
//            }
//        });
        for (EventPost p : posts){
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getDate();
            row[2] = p.getvPost().getVenue().getVenueName();
            row[3] = p.getAvailableSpot();
            row[4] = p.getLikes();
            row[5] = p.getFavorites();
            model.addRow(row);
        }
    }
    private void populateEventByFavorites() {
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        ArrayList<EventPost> posts = new ArrayList<EventPost>();
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
            EventPost post = (EventPost)infoPost;
            posts.add(post);
        }
        Collections.sort(posts, new Comparator<EventPost>(){
            @Override
            public int compare(EventPost o1, EventPost o2) {
                return o2.getFavorites()- o1.getFavorites();
            }
        });
        for (EventPost p : posts){
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getDate();
            row[2] = p.getvPost().getVenue().getVenueName();
            row[3] = p.getAvailableSpot();
            row[4] = p.getLikes();
            row[5] = p.getFavorites();
            model.addRow(row);
        }
    }

    private void populateEventByAvaSpots(){
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        ArrayList<EventPost> posts = new ArrayList<EventPost>();
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
            EventPost post = (EventPost)infoPost;
            posts.add(post);
        }
        Collections.sort(posts, new Comparator<EventPost>(){
            @Override
            public int compare(EventPost o1, EventPost o2) {
                return o2.getAvailableSpot()- o1.getAvailableSpot();
            }
        });
        for (EventPost p : posts){
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getDate();
            row[2] = p.getvPost().getVenue().getVenueName();
            row[3] = p.getAvailableSpot();
            row[4] = p.getLikes();
            row[5] = p.getFavorites();
            model.addRow(row);
        }
    }
    
    private void populateEventByDate(){
        DefaultTableModel model = (DefaultTableModel) tblEvent.getModel();
        model.setRowCount(0);
        ArrayList<EventPost> posts = new ArrayList<EventPost>();
        for (InformationPost infoPost : business.getMasterEventPostDirectory()){
            EventPost post = (EventPost)infoPost;
            posts.add(post);
        }
        Collections.sort(posts, new Comparator<EventPost>(){
            @Override
            public int compare(EventPost o1, EventPost o2) {
                return (int)(o2.getDate().getTime()- o1.getDate().getTime());
            }
        });
        for (EventPost p : posts){
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getDate();
            row[2] = p.getvPost().getVenue().getVenueName();
            row[3] = p.getAvailableSpot();
            row[4] = p.getLikes();
            row[5] = p.getFavorites();
            model.addRow(row);
        }
    }
    
    public void populateHotEvent(){
        int hotNum = 0;
        EventPost hotEvent = null;
        for (Campus c : business.getCampusList()){
            for (Enterprise e : c.getEnterpriseDirectory().getEnterpriseList()){
                for (Group g : e.getGroupDirectory().getGroupList()){
                    if (g instanceof EventManagerGroup){
                        for (InformationPost ip : g.getInfoQueue().getInfoPostList()){
                            if (ip instanceof EventPost){
                                EventPost post = (EventPost)ip;
                                int num = post.getCurrentRegister().size();
                                if (num > hotNum){
                                    hotNum = num;
                                    hotEvent = post;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (hotEvent != null){
//            lblImagePreview.setText("The most popular event is:" + hotEvent.getEventName() + ",The number of participants:" + hotNum);
            String path = hotEvent.getPicPath();
            ImageIcon imgIcon = new ImageIcon(path);
            Image img = imgIcon.getImage();
            Image smallImg = img.getScaledInstance(100,100,Image.SCALE_DEFAULT);
            ImageIcon Icon = new ImageIcon(smallImg);
//            lblImagePreview.setIcon(Icon);
            this.hotPost = hotEvent;
        }
    }

}
